# # -*- coding: utf-8 -*-
# """app.py

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1vM5IqG5OHqARKjupY1Clk7jxTTR3kiPb
# """

# import os
# import requests
# import ee
# import rasterio
# from rasterio.merge import merge
# from glob import glob
# import streamlit as st

# # Initialize Earth Engine
# def initialize_ee(project='ee-bordamit'):
#     ee.Authenticate()
#     ee.Initialize(project=project)

# # Define a function to load the Area of Interest (AOI) from a shapefile
# def load_aoi(aoi_path):
#     return ee.FeatureCollection(aoi_path)

# # Load the Sentinel-2 image collection and filter by date and bounds
# def load_sentinel_image_collection(aoi, start_date='2023-01-01', end_date='2023-01-31'):
#     s2 = ee.ImageCollection('COPERNICUS/S2_HARMONIZED')
#     return s2.filterBounds(aoi).filterDate(start_date, end_date).mean()

# # Compute NDVI for the given image collection
# def compute_ndvi(image):
#     return image.normalizedDifference(['B8', 'B4']).rename('NDVI')

# # Clip the image to the Area of Interest (AOI)
# def clip_image_to_aoi(image, aoi):
#     return image.clip(aoi)

# # Get download URL for a specific NDVI region
# def get_download_url(ndvi_image, region):
#     return ndvi_image.clip(region).getDownloadURL({'scale': 10, 'crs': 'EPSG:4326', 'filePerBand': False, 'format': 'GeoTIFF'})

# # Function to download images from URLs
# def download_images(download_urls, output_folder):
#     os.makedirs(output_folder, exist_ok=True)

#     for i, url in enumerate(download_urls):
#         if url:
#             try:
#                 response = requests.get(url)
#                 response.raise_for_status()
#                 with open(os.path.join(output_folder, f"image_{i}.tif"), "wb") as f:
#                     f.write(response.content)
#                 print(f"Downloaded image {i + 1}")
#             except requests.exceptions.RequestException as e:
#                 print(f"Error downloading image {i+1}: {e}")

# # Function to create a mosaic from a list of downloaded images
# def mosaic_tif_images(folders, output_file):
#     tif_files = [glob(os.path.join(folder, "*.tif")) for folder in folders]
#     tif_files = [item for sublist in tif_files for item in sublist]

#     src_files_to_mosaic = [rasterio.open(tif) for tif in tif_files]
#     mosaic, out_trans = merge(src_files_to_mosaic)

#     out_meta = src_files_to_mosaic[0].meta.copy()
#     out_meta.update({
#         "driver": "GTiff",
#         "count": mosaic.shape[0],
#         "width": mosaic.shape[2],
#         "height": mosaic.shape[1],
#         "transform": out_trans
#     })

#     with rasterio.open(output_file, "w", **out_meta) as dest:
#         dest.write(mosaic)

#     print(f"Mosaic created successfully at {output_file}")

# # Main function to execute the entire process
# def process(aoi_path, num_splits, start_date='2023-01-01', end_date='2023-01-31', output_folder="downloaded_images"):
#     initialize_ee()

#     # Load the AOI and Sentinel image
#     aoi = load_aoi(aoi_path)
#     image = load_sentinel_image_collection(aoi, start_date, end_date)

#     # Compute NDVI and clip to the AOI
#     ndvi = compute_ndvi(image)
#     ndvi_clipped = clip_image_to_aoi(ndvi, aoi)

#     # Split the AOI into sub-regions (you can modify this part as per your needs)
#     sub_regions = split_bounds(aoi.geometry(), num_splits)

#     # Get download URLs for each sub-region
#     download_urls = [get_download_url(ndvi_clipped, region) for region in sub_regions]

#     # Download images from the URLs
#     download_images(download_urls, output_folder)

#     # Create a mosaic from the downloaded images
#     mosaic_tif_images([output_folder], "mosaic_output.tif")
#     return "Mosaic created successfully!"
# # Define Streamlit UI components
# def streamlit_ui():
#     st.title('Sentinel-2 NDVI Processor')

#     # User inputs for AOI path (enter path to the directory or asset)
#     aoi_path = st.text_input("Enter the path to your AOI (e.g., 'projects/ee-bordamit/assets/Botad')", "projects/ee-bordamit/assets/Botad")

#     # User inputs for date range and number of splits
#     start_date = st.date_input("Start Date", value='2023-01-01')
#     end_date = st.date_input("End Date", value='2023-01-31')
#     num_splits = st.slider("Number of Sub-regions", min_value=1, max_value=10, value=5)

#     # Start processing on button click
#     if st.button('Process'):
#         st.text('Processing your data...')
#         result = process(aoi_path, num_splits, start_date=str(start_date), end_date=str(end_date))
#         st.text(result)

#         st.text('Download the generated mosaic: ')
#         st.download_button('Download Mosaic', "mosaic_output.tif", file_name="mosaic_output.tif")


# if __name__ == "__main__":
#     streamlit_ui()
import os
import requests
import ee
import rasterio
from rasterio.merge import merge
from glob import glob
import streamlit as st
from io import BytesIO
import tempfile

# Initialize Earth Engine
def initialize_ee(project='ee-bordamit'):
    ee.Authenticate()
    ee.Initialize(project=project)

# Define a function to load the Area of Interest (AOI) from a shapefile
def load_aoi(aoi_path):
    return ee.FeatureCollection(aoi_path)

# Load the Sentinel-2 image collection and filter by date and bounds
def load_sentinel_image_collection(aoi, start_date='2023-01-01', end_date='2023-01-31'):
    s2 = ee.ImageCollection('COPERNICUS/S2_HARMONIZED')
    return s2.filterBounds(aoi).filterDate(start_date, end_date).mean()

# Compute NDVI for the given image collection
def compute_ndvi(image):
    return image.normalizedDifference(['B8', 'B4']).rename('NDVI')

# Clip the image to the Area of Interest (AOI)
def clip_image_to_aoi(image, aoi):
    return image.clip(aoi)

# Get download URL for a specific NDVI region
def get_download_url(ndvi_image, region):
    return ndvi_image.clip(region).getDownloadURL({'scale': 10, 'crs': 'EPSG:4326', 'filePerBand': False, 'format': 'GeoTIFF'})

# Function to download images from URLs
def download_images(download_urls, output_folder):
    os.makedirs(output_folder, exist_ok=True)

    for i, url in enumerate(download_urls):
        if url:
            try:
                response = requests.get(url)
                response.raise_for_status()
                with open(os.path.join(output_folder, f"image_{i}.tif"), "wb") as f:
                    f.write(response.content)
                print(f"Downloaded image {i + 1}")
            except requests.exceptions.RequestException as e:
                print(f"Error downloading image {i+1}: {e}")

# Function to create a mosaic from a list of downloaded images
def mosaic_tif_images(folders, output_file):
    tif_files = [glob(os.path.join(folder, "*.tif")) for folder in folders]
    tif_files = [item for sublist in tif_files for item in sublist]

    src_files_to_mosaic = [rasterio.open(tif) for tif in tif_files]
    mosaic, out_trans = merge(src_files_to_mosaic)

    out_meta = src_files_to_mosaic[0].meta.copy()
    out_meta.update({
        "driver": "GTiff",
        "count": mosaic.shape[0],
        "width": mosaic.shape[2],
        "height": mosaic.shape[1],
        "transform": out_trans
    })

    with rasterio.open(output_file, "w", **out_meta) as dest:
        dest.write(mosaic)

    print(f"Mosaic created successfully at {output_file}")

# Main function to execute the entire process
def process(aoi_path, num_splits, start_date='2023-01-01', end_date='2023-01-31'):
    initialize_ee()

    # Load the AOI and Sentinel image
    aoi = load_aoi(aoi_path)
    image = load_sentinel_image_collection(aoi, start_date, end_date)

    # Compute NDVI and clip to the AOI
    ndvi = compute_ndvi(image)
    ndvi_clipped = clip_image_to_aoi(ndvi, aoi)

    # Split the AOI into sub-regions (you can modify this part as per your needs)
    sub_regions = split_bounds(aoi.geometry(), num_splits)

    # Get download URLs for each sub-region
    download_urls = [get_download_url(ndvi_clipped, region) for region in sub_regions]

    # Create a temporary directory for the downloaded images
    with tempfile.TemporaryDirectory() as tmp_dir:
        # Download images to the temporary folder
        download_images(download_urls, tmp_dir)

        # Create a mosaic from the downloaded images
        mosaic_file_path = os.path.join(tmp_dir, "mosaic_output.tif")
        mosaic_tif_images([tmp_dir], mosaic_file_path)

        # Open the mosaic file as a byte stream for download in Streamlit
        with open(mosaic_file_path, "rb") as f:
            mosaic_data = f.read()

    return mosaic_data

# Define Streamlit UI components
def streamlit_ui():
    st.title('Sentinel-2 NDVI Processor')

    # User inputs for AOI path (enter path to the directory or asset)
    aoi_path = st.text_input("Enter the path to your AOI (e.g., 'projects/ee-bordamit/assets/Botad')", "projects/ee-bordamit/assets/Botad")

    # User inputs for date range and number of splits
    start_date = st.date_input("Start Date", value='2023-01-01')
    end_date = st.date_input("End Date", value='2023-01-31')
    num_splits = st.slider("Number of Sub-regions", min_value=1, max_value=10, value=5)

    # Start processing on button click
    if st.button('Process'):
        st.text('Processing your data...')
        mosaic_data = process(aoi_path, num_splits, start_date=str(start_date), end_date=str(end_date))

        st.text('Download the generated mosaic: ')
        st.download_button('Download Mosaic', mosaic_data, file_name="mosaic_output.tif")

if __name__ == "__main__":
    streamlit_ui()
